var N=null,E="",T="t",U="u",searchIndex={};
var R=["option","either","Apply the function `f` on the value in the `Left` variant…","Apply the function `f` on the value in the `Right` variant…","Factor out a homogeneous type from an either of pairs.","into_iter","result","formatter","ordering","as_ref","The enum `Either` with variants `Left` and `Right` is a…","A value of type `L`.","A value of type `R`.","interleave","multipeek","Create an iterator that merges elements of the contained…","enumerate","Iterate `i` and `j` in lock step.","An iterator adaptor that merges the two base iterators in…","An iterator adaptor that iterates over the cartesian…","Format all iterator elements lazily, separated by `sep`.","An iterator adaptor that merges an abitrary number of base…","An iterator adapter to filter out duplicate elements.","An iterator which iterates two other iterators…","put_back","itertools","as_mut","eitherorboth","itertools::structs","into_inner","An iterator adaptor to insert a particular value between…","intersperse","Create an iterator which iterates over both this and the…","A “meta iterator adaptor”. Its closure receives a…","batching","Return an iterator adaptor that merges the two base…","merge_join_by","mergejoinby","kmerge_by","Return an iterator adaptor that flattens an iterator of…","kmergeby","Return an iterator adaptor that iterates over the…","coalesce","Return an iterator adaptor that filters out elements that…","combinations","positions","Combine all an iterator's elements into one element by…","Combine all iterator elements into one String, seperated…","Format all iterator elements, separated by `sep`.","Sort all iterator elements into a new iterator in…","intoiter","minmaxresult","Return the minimum and maximum element of an iterator, as…","try_from","try_into","borrow_mut","type_id","to_owned","clone_into","borrow","typeid","to_string","string","next_back","partial_cmp","size_hint","deref_mut","peeking_next","collect","multiproduct","interleaveshortest","whilesome","kmerge","padusing","putbackn","iterate","uniqueby","ziplongest","foldwhile","position","Return true if the value is the `Left` variant.","is_right","Return true if the value is the `Right` variant.","Convert the left side of `Either<L, R>` to an `Option<L>`.","Convert the right side of `Either<L, R>` to an `Option<R>`.","Convert `&Either<L, R>` to `Either<&L, &R>`.","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.","Convert `Either<L, R>` to `Either<R, L>`.","map_left","map_right","Apply one of two functions depending on contents, unifying…","either_with","Like `either`, but provide some context to whichever of…","left_and_then","right_and_then","Convert the inner value to an iterator.","Return left value or given value","left_or_default","Return left or a default","left_or_else","Returns left value or computes it from a closure","Return right value or given value","right_or_default","Return right or a default","right_or_else","Returns right value or computes it from a closure","factor_first","factor_second","Extract the value of an either over two equivalent types.","Map `f` over the contained value and return the result in…","MinMaxResult","EitherOrBoth","FoldWhile","MultiPeek","PeekingNext","Itertools","Interleave","InterleaveShortest","MapResults","TakeWhileRef","WhileSome","TupleCombinations","Positions","MultiProduct","Combinations","ConsTuples","FormatWith","IntoChunks","Intersperse","MergeJoinBy","PeekingTakeWhile","ProcessResults","RepeatCall","TupleBuffer","TupleWindows","WithPosition","ZipLongest","An iterator over the items of a `RotatedVec`.","rotatedvec","RotatedVec"];
searchIndex["either"]={"doc":"The enum [`Either`] with variants `Left` and `Right` is a…","i":[[4,"Either",R[1],R[10],N,N],[13,"Left",E,R[11],0,N],[13,"Right",E,R[12],0,N],[11,"is_left",E,R[80],0,[[["self"]],["bool"]]],[11,R[81],E,R[82],0,[[["self"]],["bool"]]],[11,"left",E,R[83],0,[[],[R[0]]]],[11,"right",E,R[84],0,[[],[R[0]]]],[11,R[9],E,R[85],0,[[["self"]],[[R[1]],["r"],["l"]]]],[11,R[26],E,R[86],0,[[["self"]],[["r"],[R[1]],["l"]]]],[11,"flip",E,R[87],0,[[],[R[1]]]],[11,R[88],E,R[2],0,[[["f"]],[R[1]]]],[11,R[89],E,R[3],0,[[["f"]],[R[1]]]],[11,R[1],E,R[90],0,[[["f"],["g"]],[T]]],[11,R[91],E,R[92],0,[[["ctx"],["f"],["g"]],[T]]],[11,R[93],E,R[2],0,[[["f"]],[R[1]]]],[11,R[94],E,R[3],0,[[["f"]],[R[1]]]],[11,R[5],E,R[95],0,[[],[R[1]]]],[11,"left_or",E,R[96],0,[[["l"]],["l"]]],[11,R[97],E,R[98],0,[[],["l"]]],[11,R[99],E,R[100],0,[[["f"]],["l"]]],[11,"right_or",E,R[101],0,[[["r"]],["r"]]],[11,R[102],E,R[103],0,[[],["r"]]],[11,R[104],E,R[105],0,[[["f"]],["r"]]],[11,R[106],E,R[4],0,[[]]],[11,R[107],E,R[4],0,[[]]],[11,R[29],E,R[108],0,[[],[T]]],[11,"map",E,R[109],0,[[["f"]],[R[1]]]],[14,"try_left",E,"Macro for unwrapping the left side of an `Either`, which…",N,N],[14,"try_right",E,"Dual to `try_left!`, see its documentation for more…",N,N],[11,R[5],E,E,0,[[],["i"]]],[11,R[53],E,E,0,[[[U]],[R[6]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[54],E,E,0,[[],[R[6]]]],[11,R[59],E,E,0,[[["self"]],[T]]],[11,R[55],E,E,0,[[["self"]],[T]]],[11,R[56],E,E,0,[[["self"]],[R[60]]]],[11,"deref",E,E,0,[[["self"]]]],[11,"fmt",E,E,0,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,0,[[["self"],[R[7]]],[R[6]]]],[11,"eq",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"cmp",E,E,0,[[["self"],[R[1]]],[R[8]]]],[11,R[64],E,E,0,[[["self"],[R[1]]],[[R[8]],[R[0],[R[8]]]]]],[11,"lt",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,R[66],E,E,0,[[["self"]]]],[11,"hash",E,E,0,[[["self"],["__hlr"]]]],[11,"next",E,E,0,[[["self"]],[R[0]]]],[11,R[65],E,E,0,[[["self"]]]],[11,"fold",E,E,0,[[["acc"],["g"]],["acc"]]],[11,"count",E,E,0,[[],["usize"]]],[11,"last",E,E,0,[[],[R[0]]]],[11,"nth",E,E,0,[[["self"],["usize"]],[R[0]]]],[11,R[68],E,E,0,[[],["b"]]],[11,"all",E,E,0,[[["self"],["f"]],["bool"]]],[11,R[63],E,E,0,[[["self"]],[R[0]]]],[11,"extend",E,E,0,[[["self"],[T]]]],[11,R[9],E,E,0,[[["self"]],["target"]]],[11,R[9],E,E,0,[[["self"]],["str"]]],[11,R[9],E,E,0,[[["self"]]]],[11,R[26],E,E,0,[[["self"]],["str"]]],[11,R[26],E,E,0,[[["self"]],["target"]]],[11,R[26],E,E,0,[[["self"]]]],[11,"into",E,E,0,[[],[R[6]]]],[11,"from",E,E,0,[[[R[6]]],["self"]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]]],"p":[[4,"Either"]]};
searchIndex["itertools"]={"doc":"Extra iterator adaptors, functions and macros.","i":[[4,"Either",R[25],R[10],N,N],[13,"Left",E,R[11],0,N],[13,"Right",E,R[12],0,N],[4,"Diff",E,"A type returned by the `diff_with` function.",N,N],[13,"FirstMismatch",E,"The index of the first non-matching element along with…",1,N],[13,"Shorter",E,"The total number of elements that were in `J` along with…",1,N],[13,"Longer",E,"The total number of elements that were in `I` along with…",1,N],[4,R[110],E,"`MinMaxResult` is an enum returned by `minmax`. See…",N,N],[13,"NoElements",E,"Empty iterator",2,N],[13,"OneElement",E,"Iterator with one element, so the minimum and maximum are…",2,N],[13,"MinMax",E,"More than one element in the iterator, the first element…",2,N],[4,"Position",E,"A value yielded by `WithPosition`. Indicates the position…",N,N],[13,"First",E,"This is the first element.",3,N],[13,"Middle",E,"This is neither the first nor the last element.",3,N],[13,"Last",E,"This is the last element.",3,N],[13,"Only",E,"This is the only element.",3,N],[4,R[111],E,"Value that either holds a single A or B, or both.",N,N],[13,"Both",E,"Both values are present.",4,N],[13,"Left",E,"Only the left value of type `A` is present.",4,N],[13,"Right",E,"Only the right value of type `B` is present.",4,N],[4,R[112],E,"An enum used for controlling the execution of…",N,N],[13,"Continue",E,"Continue folding with this value",5,N],[13,"Done",E,"Fold is complete and will return this value",5,N],[5,"concat",E,R[46],N,[[["i"]]]],[5,"cons_tuples",E,"Create an iterator that maps for example iterators of…",N,[[["i"]],["constuples"]]],[5,"diff_with",E,"Compares every element yielded by both `i` and `j` with…",N,[[["j"],["i"],["f"]],[["diff"],[R[0],["diff"]]]]],[5,R[38],E,R[15],N,[[["i"],["f"]],[R[40]]]],[5,"process_results",E,"“Lift” a function of the values of an iterator so that it…",N,[[["i"],["f"]],[R[6]]]],[5,"repeat_n",E,"Create an iterator that produces `n` repetitions of…",N,[[["a"],["usize"]],["repeatn"]]],[5,"repeat_call",E,"An iterator source that produces elements indefinitely by…",N,[[["f"]],["repeatcall"]]],[5,"unfold",E,"Creates a new unfold source with the specified closure as…",N,[[["f"],["st"]],["unfold"]]],[5,R[75],E,"Creates a new iterator that infinitely applies function to…",N,[[["f"],["st"]],[R[75]]]],[5,"multizip",E,"An iterator that generalizes .zip() and allows running…",N,[[[U]],["zip"]]],[5,R[13],E,"Create an iterator that interleaves elements in `i` and `j`.",N,[[["j"],["i"]],[R[13]]]],[5,"merge",E,"Create an iterator that merges elements in `i` and `j`.",N,[[["j"],["i"]],["merge"]]],[5,R[24],E,"Create an iterator where you can put back a single item",N,[[["i"]],["putback"]]],[5,"put_back_n",E,"Create an iterator where you can put back multiple values…",N,[[["i"]],[R[74]]]],[5,R[14],E,"An iterator adaptor that allows the user to peek at…",N,[[["i"]],[R[14]]]],[5,R[72],E,R[15],N,[[["i"]],[R[72]]]],[5,"zip_eq",E,R[17],N,[[["j"],["i"]],["zipeq"]]],[5,R[36],E,"Return an iterator adaptor that merge-joins items from the…",N,[[["j"],["i"],["f"]],[R[37]]]],[5,"rciter",E,"Return an iterator inside a `Rc<RefCell<_>>` wrapper.",N,[[["i"]],["rciter"]]],[5,R[16],E,"Iterate `iterable` with a running index.",N,[[["i"]],[R[16]]]],[5,"rev",E,"Iterate `iterable` in reverse.",N,[[["i"]],["rev"]]],[5,"zip",E,R[17],N,[[["j"],["i"]],["zip"]]],[5,"chain",E,"Create an iterator that first iterates `i` and then `j`.",N,[[["j"],["i"]],["chain"]]],[5,"cloned",E,"Create an iterator that clones each element from &T to T",N,[[["i"]],["cloned"]]],[5,"fold",E,"Perform a fold operation over the iterable.",N,[[["i"],["b"],["f"]],["b"]]],[5,"all",E,"Test whether the predicate holds for all elements in the…",N,[[["i"],["f"]],["bool"]]],[5,"any",E,"Test whether the predicate holds for any elements in the…",N,[[["i"],["f"]],["bool"]]],[5,"max",E,"Return the maximum value of the iterable.",N,[[["i"]],[R[0]]]],[5,"min",E,"Return the minimum value of the iterable.",N,[[["i"]],[R[0]]]],[5,"join",E,R[47],N,[[["i"],["str"]],[R[62]]]],[5,"sorted",E,R[49],N,[[["i"]],[R[50]]]],[5,"equal",E,"Return `true` if both iterables produce equal sequences…",N,[[["j"],["i"]],["bool"]]],[5,"assert_equal",E,"Assert that two iterables produce equal sequences, with…",N,[[["j"],["i"]]]],[5,"partition",E,"Partition a sequence using predicate `pred` so that…",N,[[["i"],["f"]],["usize"]]],[0,"structs",E,"The concrete iterator types.",N,N],[3,"Dedup",R[28],"An iterator adaptor that removes repeated duplicates.",N,N],[3,R[116],E,"An iterator adaptor that alternates elements from two…",N,N],[3,R[117],E,"An iterator adaptor that alternates elements from the two…",N,N],[3,"Product",E,R[19],N,N],[3,"PutBack",E,"An iterator adaptor that allows putting back a single item…",N,N],[3,"Batching",E,R[33],N,N],[3,"MapInto",E,"An iterator adapter to apply `Into` conversion to each…",N,N],[3,R[118],E,"An iterator adapter to apply a transformation within a…",N,N],[3,"Merge",E,R[18],N,N],[3,"MergeBy",E,R[18],N,N],[3,R[119],E,"An iterator adaptor that borrows from a `Clone`-able…",N,N],[3,R[120],E,"An iterator adaptor that filters `Option<A>` iterator…",N,N],[3,"Coalesce",E,"An iterator adaptor that may join together adjacent…",N,N],[3,R[121],E,"An iterator to iterate through all combinations in a…",N,N],[3,R[122],E,"An iterator adapter to get the positions of each element…",N,N],[3,"Update",E,"An iterator adapter to apply a mutating function to each…",N,N],[3,"Step",E,"An iterator adaptor that steps a number elements in the…",N,N],[3,R[123],E,R[19],N,N],[3,R[124],E,"An iterator to iterate through all the `n`-length…",N,N],[3,R[125],E,"An iterator that maps an iterator of tuples like `((A, B),…",N,N],[3,"Format",E,R[20],N,N],[3,R[126],E,R[20],N,N],[3,R[127],E,"`ChunkLazy` is the storage for a lazy chunking operation.",N,N],[3,"Chunk",E,"An iterator for the elements in a single chunk.",N,N],[3,"Chunks",E,"An iterator that yields the Chunk iterators.",N,N],[3,"GroupBy",E,"`GroupBy` is the storage for the lazy grouping operation.",N,N],[3,"Group",E,"An iterator for the elements in a single group.",N,N],[3,"Groups",E,"An iterator that yields the Group iterators.",N,N],[3,R[128],E,R[30],N,N],[3,"KMerge",E,R[21],N,N],[3,"KMergeBy",E,R[21],N,N],[3,R[129],E,"An iterator adaptor that merge-joins items from the two…",N,N],[3,R[113],E,"See `multipeek()` for more information.",N,N],[3,"PadUsing",E,"An iterator adaptor that pads a sequence to a minimum…",N,N],[3,R[130],E,"An iterator adaptor that takes items while a closure…",N,N],[3,R[131],E,"An iterator that produces only the `T` values as long as…",N,N],[3,"PutBackN",E,"An iterator adaptor that allows putting multiple items in…",N,N],[3,"RcIter",E,"A wrapper for `Rc<RefCell<I>>`, that implements the…",N,N],[12,"rciter",E,"The boxed iterator.",6,N],[3,"RepeatN",E,"An iterator that produces n repetitions of an element.",N,N],[3,R[132],E,"See `repeat_call` for more information.",N,N],[3,"Unfold",E,"See `unfold` for more information.",N,N],[12,"state",E,"Internal state that will be passed to the closure on the…",7,N],[3,"Iterate",E,"An iterator that infinitely applies function to value and…",N,N],[3,"Tee",E,"One half of an iterator pair where both return the same…",N,N],[3,R[133],E,"An iterator over a incomplete tuple.",N,N],[3,R[134],E,"An iterator over all contiguous windows that produces…",N,N],[3,"Tuples",E,"An iterator that groups the items in tuples of a specific…",N,N],[3,"Unique",E,R[22],N,N],[3,"UniqueBy",E,R[22],N,N],[3,R[135],E,"An iterator adaptor that wraps each element in an…",N,N],[3,"ZipEq",E,R[23],N,N],[3,R[136],E,R[23],N,N],[3,"Zip",E,"See `multizip` for more information.",N,N],[11,"with_value",E,"put back value `value` (builder method)",8,[[],["self"]]],[11,"into_parts",E,"Split the `PutBack` into its parts.",8,[[]]],[11,R[24],E,"Put back a single value to the front of the iterator.",8,[[["self"]]]],[11,"has_left",R[25],"If `Left`, or `Both`, return true, otherwise, return false.",4,[[["self"]],["bool"]]],[11,"has_right",E,"If `Right`, or `Both`, return true, otherwise, return false.",4,[[["self"]],["bool"]]],[11,"left",E,"If `Left`, or `Both`, return `Some` with the left value,…",4,[[],[R[0]]]],[11,"right",E,"If `Right`, or `Both`, return `Some` with the right value,…",4,[[],[R[0]]]],[11,R[9],E,"Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A,…",4,[[["self"]],[["b"],[R[27]],["a"]]]],[11,R[26],E,"Converts from `&mut EitherOrBoth<A, B>` to…",4,[[["self"]],[[R[27]],["a"],["b"]]]],[11,"into_option",E,"`into_option` creates an `Option` of type `(T, T)`. The…",2,[[],[R[0]]]],[11,"reset_peek",R[28],"Reset the peeking “cursor”",9,[[["self"]]]],[11,"peek",E,"Works exactly like `.next()` with the only difference that…",9,[[["self"]],[R[0]]]],[11,R[24],E,"Puts x in front of the iterator. The values are yielded in…",10,[[["self"]]]],[11,"into_buffer",E,"Return a buffer with the produced items that was not…",11,[[],["tuplebuffer"]]],[11,R[29],R[25],"Return the inner value.",3,[[],[T]]],[8,R[114],E,"An iterator that allows peeking at an element before…",N,N],[10,R[67],E,"Pass a reference to the next iterator element to the…",12,[[["self"],["f"]],[R[0]]]],[8,R[115],E,"An [`Iterator`] blanket implementation that provides extra…",N,N],[11,R[13],E,"Alternate elements from two iterators until both have run…",13,[[["j"]],[R[13]]]],[11,"interleave_shortest",E,"Alternate elements from two iterators until at least one…",13,[[["j"]],[R[70]]]],[11,R[31],E,R[30],13,[[],[R[31]]]],[11,"zip_longest",E,R[32],13,[[["j"]],[R[77]]]],[11,"zip_eq",E,R[32],13,[[["j"]],["zipeq"]]],[11,R[34],E,R[33],13,[[["f"]],[R[34]]]],[11,"group_by",E,"Return an iterable that can group iterator elements.…",13,[[["f"]],["groupby"]]],[11,"chunks",E,"Return an iterable that can chunk the iterator.",13,[[["usize"]],["intochunks"]]],[11,"tuple_windows",E,"Return an iterator over all contiguous windows producing…",13,[[],["tuplewindows"]]],[11,"tuples",E,"Return an iterator that groups the items in tuples of a…",13,[[],["tuples"]]],[11,"tee",E,"Split into an iterator pair that both yield all elements…",13,[[]]],[11,"step",E,"Return an iterator adaptor that steps `n` elements in the…",13,[[["usize"]],["step"]]],[11,"map_into",E,"Convert each item of the iterator using the `Into` trait.",13,[[],["mapinto"]]],[11,"map_results",E,"Return an iterator adaptor that applies the provided…",13,[[["f"]],["mapresults"]]],[11,"merge",E,R[35],13,[[["j"]],["merge"]]],[11,"merge_by",E,R[35],13,[[["j"],["f"]],["mergeby"]]],[11,R[36],E,"Create an iterator that merges items from both this and…",13,[[["j"],["f"]],[R[37]]]],[11,R[72],E,R[39],13,[[],[R[72]]]],[11,R[38],E,R[39],13,[[["f"]],[R[40]]]],[11,"cartesian_product",E,R[41],13,[[["j"]],["product"]]],[11,"multi_cartesian_product",E,R[41],13,[[],[R[69]]]],[11,R[42],E,"Return an iterator adaptor that uses the passed-in closure…",13,[[["f"]],[R[42]]]],[11,"dedup",E,"Remove duplicates from sections of consecutive identical…",13,[[],["dedup"]]],[11,"unique",E,R[43],13,[[],["unique"]]],[11,"unique_by",E,R[43],13,[[["f"]],[R[76]]]],[11,"peeking_take_while",E,"Return an iterator adaptor that borrows from this iterator…",13,[[["self"],["f"]],["peekingtakewhile"]]],[11,"take_while_ref",E,"Return an iterator adaptor that borrows from a…",13,[[["self"],["f"]],["takewhileref"]]],[11,"while_some",E,"Return an iterator adaptor that filters `Option<A>`…",13,[[],[R[71]]]],[11,"tuple_combinations",E,R[41],13,[[],["tuplecombinations"]]],[11,R[44],E,R[41],13,[[["usize"]],[R[44]]]],[11,"pad_using",E,"Return an iterator adaptor that pads the sequence to a…",13,[[["usize"],["f"]],[R[73]]]],[11,"with_position",E,"Return an iterator adaptor that wraps each element in a…",13,[[],["withposition"]]],[11,R[45],E,"Return an iterator adaptor that yields the indices of all…",13,[[["p"]],[R[45]]]],[11,"update",E,"Return an iterator adaptor that applies a mutating…",13,[[["f"]],["update"]]],[11,"next_tuple",E,"Advances the iterator and returns the next items grouped…",13,[[["self"]],[R[0]]]],[11,"collect_tuple",E,"Collects all items from the iterator into a tuple of a…",13,[[],[R[0]]]],[11,"find_position",E,"Find the position and value of the first element…",13,[[["self"],["p"]],[R[0]]]],[11,"all_equal",E,"Check whether all elements compare equal.",13,[[["self"]],["bool"]]],[11,"dropping",E,"Consume the first `n` elements from the iterator eagerly,…",13,[[["usize"]],["self"]]],[11,"dropping_back",E,"Consume the last `n` elements from the iterator eagerly,…",13,[[["usize"]],["self"]]],[11,"foreach",E,"Run the closure `f` eagerly on each element of the iterator.",13,[[["f"]]]],[11,"concat",E,R[46],13,[[]]],[11,"collect_vec",E,"`.collect_vec()` is simply a type specialization of…",13,[[],["vec"]]],[11,"set_from",E,"Assign to each reference in `self` from the `from`…",13,[[["self"],["j"]],["usize"]]],[11,"join",E,R[47],13,[[["self"],["str"]],[R[62]]]],[11,"format",E,R[48],13,[[["str"]],["format"]]],[11,"format_with",E,R[48],13,[[["str"],["f"]],["formatwith"]]],[11,"fold_results",E,"Fold `Result` values from an iterator.",13,[[["self"],["b"],["f"]],[R[6]]]],[11,"fold_options",E,"Fold `Option` values from an iterator.",13,[[["self"],["b"],["f"]],[R[0]]]],[11,"fold1",E,"Accumulator of the elements in the iterator.",13,[[["f"]],[R[0]]]],[11,"tree_fold1",E,"Accumulate the elements in the iterator in a tree-like…",13,[[["f"]],[R[0]]]],[11,"fold_while",E,"An iterator method that applies a function, producing a…",13,[[["self"],["b"],["f"]],[R[78]]]],[11,"sorted",E,R[49],13,[[],[R[50]]]],[11,"sorted_by",E,R[49],13,[[["f"]],[R[50]]]],[11,"sorted_by_key",E,R[49],13,[[["f"]],[R[50]]]],[11,"partition_map",E,"Collect all iterator elements into one of two partitions.…",13,[[["f"]]]],[11,"into_group_map",E,"Return a `HashMap` of keys mapped to `Vec`s of values.…",13,[[],[["hashmap",["vec"]],["vec"]]]],[11,"minmax",E,"Return the minimum and maximum elements in the iterator.",13,[[],[R[51]]]],[11,"minmax_by_key",E,R[52],13,[[["f"]],[R[51]]]],[11,"minmax_by",E,R[52],13,[[["f"]],[R[51]]]],[11,R[29],E,"Return the value in the continue or done.",5,[[],[T]]],[11,"is_done",E,"Return true if `self` is `Done`, false if it is `Continue`.",5,[[["self"]],["bool"]]],[14,"iproduct",E,"Create an iterator over the “cartesian product” of…",N,N],[14,"izip",E,"Create an iterator running multiple iterators in lockstep.",N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,R[61],E,E,0,[[["self"]],[R[62]]]],[11,R[5],E,E,0,[[],["i"]]],[11,R[57],E,E,0,[[["self"]],[T]]],[11,R[58],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,R[53],E,E,0,[[[U]],[R[6]]]],[11,R[54],E,E,0,[[],[R[6]]]],[11,R[59],E,E,0,[[["self"]],[T]]],[11,R[55],E,E,0,[[["self"]],[T]]],[11,R[56],E,E,0,[[["self"]],[R[60]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[53],E,E,1,[[[U]],[R[6]]]],[11,R[54],E,E,1,[[],[R[6]]]],[11,R[59],E,E,1,[[["self"]],[T]]],[11,R[55],E,E,1,[[["self"]],[T]]],[11,R[56],E,E,1,[[["self"]],[R[60]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[57],E,E,2,[[["self"]],[T]]],[11,R[58],E,E,2,[[["self"],[T]]]],[11,"into",E,E,2,[[],[U]]],[11,R[53],E,E,2,[[[U]],[R[6]]]],[11,R[54],E,E,2,[[],[R[6]]]],[11,R[59],E,E,2,[[["self"]],[T]]],[11,R[55],E,E,2,[[["self"]],[T]]],[11,R[56],E,E,2,[[["self"]],[R[60]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[57],E,E,3,[[["self"]],[T]]],[11,R[58],E,E,3,[[["self"],[T]]]],[11,"into",E,E,3,[[],[U]]],[11,R[53],E,E,3,[[[U]],[R[6]]]],[11,R[54],E,E,3,[[],[R[6]]]],[11,R[59],E,E,3,[[["self"]],[T]]],[11,R[55],E,E,3,[[["self"]],[T]]],[11,R[56],E,E,3,[[["self"]],[R[60]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[57],E,E,4,[[["self"]],[T]]],[11,R[58],E,E,4,[[["self"],[T]]]],[11,"into",E,E,4,[[],[U]]],[11,R[53],E,E,4,[[[U]],[R[6]]]],[11,R[54],E,E,4,[[],[R[6]]]],[11,R[59],E,E,4,[[["self"]],[T]]],[11,R[55],E,E,4,[[["self"]],[T]]],[11,R[56],E,E,4,[[["self"]],[R[60]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[57],E,E,5,[[["self"]],[T]]],[11,R[58],E,E,5,[[["self"],[T]]]],[11,"into",E,E,5,[[],[U]]],[11,R[53],E,E,5,[[[U]],[R[6]]]],[11,R[54],E,E,5,[[],[R[6]]]],[11,R[59],E,E,5,[[["self"]],[T]]],[11,R[55],E,E,5,[[["self"]],[T]]],[11,R[56],E,E,5,[[["self"]],[R[60]]]],[11,"from",R[28],E,14,[[[T]],[T]]],[11,R[5],E,E,14,[[],["i"]]],[11,R[57],E,E,14,[[["self"]],[T]]],[11,R[58],E,E,14,[[["self"],[T]]]],[11,"into",E,E,14,[[],[U]]],[11,R[53],E,E,14,[[[U]],[R[6]]]],[11,R[54],E,E,14,[[],[R[6]]]],[11,R[59],E,E,14,[[["self"]],[T]]],[11,R[55],E,E,14,[[["self"]],[T]]],[11,R[56],E,E,14,[[["self"]],[R[60]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[5],E,E,15,[[],["i"]]],[11,R[57],E,E,15,[[["self"]],[T]]],[11,R[58],E,E,15,[[["self"],[T]]]],[11,"into",E,E,15,[[],[U]]],[11,R[53],E,E,15,[[[U]],[R[6]]]],[11,R[54],E,E,15,[[],[R[6]]]],[11,R[59],E,E,15,[[["self"]],[T]]],[11,R[55],E,E,15,[[["self"]],[T]]],[11,R[56],E,E,15,[[["self"]],[R[60]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[5],E,E,16,[[],["i"]]],[11,R[57],E,E,16,[[["self"]],[T]]],[11,R[58],E,E,16,[[["self"],[T]]]],[11,"into",E,E,16,[[],[U]]],[11,R[53],E,E,16,[[[U]],[R[6]]]],[11,R[54],E,E,16,[[],[R[6]]]],[11,R[59],E,E,16,[[["self"]],[T]]],[11,R[55],E,E,16,[[["self"]],[T]]],[11,R[56],E,E,16,[[["self"]],[R[60]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[5],E,E,17,[[],["i"]]],[11,R[57],E,E,17,[[["self"]],[T]]],[11,R[58],E,E,17,[[["self"],[T]]]],[11,"into",E,E,17,[[],[U]]],[11,R[53],E,E,17,[[[U]],[R[6]]]],[11,R[54],E,E,17,[[],[R[6]]]],[11,R[59],E,E,17,[[["self"]],[T]]],[11,R[55],E,E,17,[[["self"]],[T]]],[11,R[56],E,E,17,[[["self"]],[R[60]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[5],E,E,8,[[],["i"]]],[11,R[57],E,E,8,[[["self"]],[T]]],[11,R[58],E,E,8,[[["self"],[T]]]],[11,"into",E,E,8,[[],[U]]],[11,R[53],E,E,8,[[[U]],[R[6]]]],[11,R[54],E,E,8,[[],[R[6]]]],[11,R[59],E,E,8,[[["self"]],[T]]],[11,R[55],E,E,8,[[["self"]],[T]]],[11,R[56],E,E,8,[[["self"]],[R[60]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[5],E,E,18,[[],["i"]]],[11,R[57],E,E,18,[[["self"]],[T]]],[11,R[58],E,E,18,[[["self"],[T]]]],[11,"into",E,E,18,[[],[U]]],[11,R[53],E,E,18,[[[U]],[R[6]]]],[11,R[54],E,E,18,[[],[R[6]]]],[11,R[59],E,E,18,[[["self"]],[T]]],[11,R[55],E,E,18,[[["self"]],[T]]],[11,R[56],E,E,18,[[["self"]],[R[60]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[5],E,E,19,[[],["i"]]],[11,"into",E,E,19,[[],[U]]],[11,R[53],E,E,19,[[[U]],[R[6]]]],[11,R[54],E,E,19,[[],[R[6]]]],[11,R[59],E,E,19,[[["self"]],[T]]],[11,R[55],E,E,19,[[["self"]],[T]]],[11,R[56],E,E,19,[[["self"]],[R[60]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[5],E,E,20,[[],["i"]]],[11,"into",E,E,20,[[],[U]]],[11,R[53],E,E,20,[[[U]],[R[6]]]],[11,R[54],E,E,20,[[],[R[6]]]],[11,R[59],E,E,20,[[["self"]],[T]]],[11,R[55],E,E,20,[[["self"]],[T]]],[11,R[56],E,E,20,[[["self"]],[R[60]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[5],E,E,21,[[],["i"]]],[11,R[57],E,E,21,[[["self"]],[T]]],[11,R[58],E,E,21,[[["self"],[T]]]],[11,"into",E,E,21,[[],[U]]],[11,R[53],E,E,21,[[[U]],[R[6]]]],[11,R[54],E,E,21,[[],[R[6]]]],[11,R[59],E,E,21,[[["self"]],[T]]],[11,R[55],E,E,21,[[["self"]],[T]]],[11,R[56],E,E,21,[[["self"]],[R[60]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[5],E,E,22,[[],["i"]]],[11,R[57],E,E,22,[[["self"]],[T]]],[11,R[58],E,E,22,[[["self"],[T]]]],[11,"into",E,E,22,[[],[U]]],[11,R[53],E,E,22,[[[U]],[R[6]]]],[11,R[54],E,E,22,[[],[R[6]]]],[11,R[59],E,E,22,[[["self"]],[T]]],[11,R[55],E,E,22,[[["self"]],[T]]],[11,R[56],E,E,22,[[["self"]],[R[60]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[5],E,E,23,[[],["i"]]],[11,"into",E,E,23,[[],[U]]],[11,R[53],E,E,23,[[[U]],[R[6]]]],[11,R[54],E,E,23,[[],[R[6]]]],[11,R[59],E,E,23,[[["self"]],[T]]],[11,R[55],E,E,23,[[["self"]],[T]]],[11,R[56],E,E,23,[[["self"]],[R[60]]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[5],E,E,24,[[],["i"]]],[11,R[57],E,E,24,[[["self"]],[T]]],[11,R[58],E,E,24,[[["self"],[T]]]],[11,"into",E,E,24,[[],[U]]],[11,R[53],E,E,24,[[[U]],[R[6]]]],[11,R[54],E,E,24,[[],[R[6]]]],[11,R[59],E,E,24,[[["self"]],[T]]],[11,R[55],E,E,24,[[["self"]],[T]]],[11,R[56],E,E,24,[[["self"]],[R[60]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[5],E,E,25,[[],["i"]]],[11,R[57],E,E,25,[[["self"]],[T]]],[11,R[58],E,E,25,[[["self"],[T]]]],[11,"into",E,E,25,[[],[U]]],[11,R[53],E,E,25,[[[U]],[R[6]]]],[11,R[54],E,E,25,[[],[R[6]]]],[11,R[59],E,E,25,[[["self"]],[T]]],[11,R[55],E,E,25,[[["self"]],[T]]],[11,R[56],E,E,25,[[["self"]],[R[60]]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[5],E,E,26,[[],["i"]]],[11,"into",E,E,26,[[],[U]]],[11,R[53],E,E,26,[[[U]],[R[6]]]],[11,R[54],E,E,26,[[],[R[6]]]],[11,R[59],E,E,26,[[["self"]],[T]]],[11,R[55],E,E,26,[[["self"]],[T]]],[11,R[56],E,E,26,[[["self"]],[R[60]]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[5],E,E,27,[[],["i"]]],[11,"into",E,E,27,[[],[U]]],[11,R[53],E,E,27,[[[U]],[R[6]]]],[11,R[54],E,E,27,[[],[R[6]]]],[11,R[59],E,E,27,[[["self"]],[T]]],[11,R[55],E,E,27,[[["self"]],[T]]],[11,R[56],E,E,27,[[["self"]],[R[60]]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[5],E,E,28,[[],["i"]]],[11,"into",E,E,28,[[],[U]]],[11,R[53],E,E,28,[[[U]],[R[6]]]],[11,R[54],E,E,28,[[],[R[6]]]],[11,R[59],E,E,28,[[["self"]],[T]]],[11,R[55],E,E,28,[[["self"]],[T]]],[11,R[56],E,E,28,[[["self"]],[R[60]]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[5],E,E,29,[[],["i"]]],[11,R[57],E,E,29,[[["self"]],[T]]],[11,R[58],E,E,29,[[["self"],[T]]]],[11,"into",E,E,29,[[],[U]]],[11,R[53],E,E,29,[[[U]],[R[6]]]],[11,R[54],E,E,29,[[],[R[6]]]],[11,R[59],E,E,29,[[["self"]],[T]]],[11,R[55],E,E,29,[[["self"]],[T]]],[11,R[56],E,E,29,[[["self"]],[R[60]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[5],E,E,30,[[],["i"]]],[11,R[57],E,E,30,[[["self"]],[T]]],[11,R[58],E,E,30,[[["self"],[T]]]],[11,"into",E,E,30,[[],[U]]],[11,R[53],E,E,30,[[[U]],[R[6]]]],[11,R[54],E,E,30,[[],[R[6]]]],[11,R[59],E,E,30,[[["self"]],[T]]],[11,R[55],E,E,30,[[["self"]],[T]]],[11,R[56],E,E,30,[[["self"]],[R[60]]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[5],E,E,31,[[],["i"]]],[11,"into",E,E,31,[[],[U]]],[11,R[53],E,E,31,[[[U]],[R[6]]]],[11,R[54],E,E,31,[[],[R[6]]]],[11,R[59],E,E,31,[[["self"]],[T]]],[11,R[55],E,E,31,[[["self"]],[T]]],[11,R[56],E,E,31,[[["self"]],[R[60]]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[5],E,E,32,[[],["i"]]],[11,R[57],E,E,32,[[["self"]],[T]]],[11,R[58],E,E,32,[[["self"],[T]]]],[11,"into",E,E,32,[[],[U]]],[11,R[53],E,E,32,[[[U]],[R[6]]]],[11,R[54],E,E,32,[[],[R[6]]]],[11,R[59],E,E,32,[[["self"]],[T]]],[11,R[55],E,E,32,[[["self"]],[T]]],[11,R[56],E,E,32,[[["self"]],[R[60]]]],[11,"from",E,E,33,[[[T]],[T]]],[11,R[61],E,E,33,[[["self"]],[R[62]]]],[11,R[57],E,E,33,[[["self"]],[T]]],[11,R[58],E,E,33,[[["self"],[T]]]],[11,"into",E,E,33,[[],[U]]],[11,R[53],E,E,33,[[[U]],[R[6]]]],[11,R[54],E,E,33,[[],[R[6]]]],[11,R[59],E,E,33,[[["self"]],[T]]],[11,R[55],E,E,33,[[["self"]],[T]]],[11,R[56],E,E,33,[[["self"]],[R[60]]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[61],E,E,34,[[["self"]],[R[62]]]],[11,"into",E,E,34,[[],[U]]],[11,R[53],E,E,34,[[[U]],[R[6]]]],[11,R[54],E,E,34,[[],[R[6]]]],[11,R[59],E,E,34,[[["self"]],[T]]],[11,R[55],E,E,34,[[["self"]],[T]]],[11,R[56],E,E,34,[[["self"]],[R[60]]]],[11,"from",E,E,35,[[[T]],[T]]],[11,"into",E,E,35,[[],[U]]],[11,R[53],E,E,35,[[[U]],[R[6]]]],[11,R[54],E,E,35,[[],[R[6]]]],[11,R[59],E,E,35,[[["self"]],[T]]],[11,R[55],E,E,35,[[["self"]],[T]]],[11,R[56],E,E,35,[[["self"]],[R[60]]]],[11,"from",E,E,36,[[[T]],[T]]],[11,R[5],E,E,36,[[],["i"]]],[11,"into",E,E,36,[[],[U]]],[11,R[53],E,E,36,[[[U]],[R[6]]]],[11,R[54],E,E,36,[[],[R[6]]]],[11,R[59],E,E,36,[[["self"]],[T]]],[11,R[55],E,E,36,[[["self"]],[T]]],[11,R[56],E,E,36,[[["self"]],[R[60]]]],[11,"from",E,E,37,[[[T]],[T]]],[11,R[5],E,E,37,[[],["i"]]],[11,"into",E,E,37,[[],[U]]],[11,R[53],E,E,37,[[[U]],[R[6]]]],[11,R[54],E,E,37,[[],[R[6]]]],[11,R[59],E,E,37,[[["self"]],[T]]],[11,R[55],E,E,37,[[["self"]],[T]]],[11,R[56],E,E,37,[[["self"]],[R[60]]]],[11,"from",E,E,38,[[[T]],[T]]],[11,"into",E,E,38,[[],[U]]],[11,R[53],E,E,38,[[[U]],[R[6]]]],[11,R[54],E,E,38,[[],[R[6]]]],[11,R[59],E,E,38,[[["self"]],[T]]],[11,R[55],E,E,38,[[["self"]],[T]]],[11,R[56],E,E,38,[[["self"]],[R[60]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[5],E,E,39,[[],["i"]]],[11,"into",E,E,39,[[],[U]]],[11,R[53],E,E,39,[[[U]],[R[6]]]],[11,R[54],E,E,39,[[],[R[6]]]],[11,R[59],E,E,39,[[["self"]],[T]]],[11,R[55],E,E,39,[[["self"]],[T]]],[11,R[56],E,E,39,[[["self"]],[R[60]]]],[11,"from",E,E,40,[[[T]],[T]]],[11,R[5],E,E,40,[[],["i"]]],[11,"into",E,E,40,[[],[U]]],[11,R[53],E,E,40,[[[U]],[R[6]]]],[11,R[54],E,E,40,[[],[R[6]]]],[11,R[59],E,E,40,[[["self"]],[T]]],[11,R[55],E,E,40,[[["self"]],[T]]],[11,R[56],E,E,40,[[["self"]],[R[60]]]],[11,"from",E,E,41,[[[T]],[T]]],[11,R[5],E,E,41,[[],["i"]]],[11,R[57],E,E,41,[[["self"]],[T]]],[11,R[58],E,E,41,[[["self"],[T]]]],[11,"into",E,E,41,[[],[U]]],[11,R[53],E,E,41,[[[U]],[R[6]]]],[11,R[54],E,E,41,[[],[R[6]]]],[11,R[59],E,E,41,[[["self"]],[T]]],[11,R[55],E,E,41,[[["self"]],[T]]],[11,R[56],E,E,41,[[["self"]],[R[60]]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[5],E,E,42,[[],["i"]]],[11,R[57],E,E,42,[[["self"]],[T]]],[11,R[58],E,E,42,[[["self"],[T]]]],[11,"into",E,E,42,[[],[U]]],[11,R[53],E,E,42,[[[U]],[R[6]]]],[11,R[54],E,E,42,[[],[R[6]]]],[11,R[59],E,E,42,[[["self"]],[T]]],[11,R[55],E,E,42,[[["self"]],[T]]],[11,R[56],E,E,42,[[["self"]],[R[60]]]],[11,"from",E,E,43,[[[T]],[T]]],[11,R[5],E,E,43,[[],["i"]]],[11,"into",E,E,43,[[],[U]]],[11,R[53],E,E,43,[[[U]],[R[6]]]],[11,R[54],E,E,43,[[],[R[6]]]],[11,R[59],E,E,43,[[["self"]],[T]]],[11,R[55],E,E,43,[[["self"]],[T]]],[11,R[56],E,E,43,[[["self"]],[R[60]]]],[11,"from",E,E,44,[[[T]],[T]]],[11,R[5],E,E,44,[[],["i"]]],[11,"into",E,E,44,[[],[U]]],[11,R[53],E,E,44,[[[U]],[R[6]]]],[11,R[54],E,E,44,[[],[R[6]]]],[11,R[59],E,E,44,[[["self"]],[T]]],[11,R[55],E,E,44,[[["self"]],[T]]],[11,R[56],E,E,44,[[["self"]],[R[60]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[5],E,E,9,[[],["i"]]],[11,R[57],E,E,9,[[["self"]],[T]]],[11,R[58],E,E,9,[[["self"],[T]]]],[11,"into",E,E,9,[[],[U]]],[11,R[53],E,E,9,[[[U]],[R[6]]]],[11,R[54],E,E,9,[[],[R[6]]]],[11,R[59],E,E,9,[[["self"]],[T]]],[11,R[55],E,E,9,[[["self"]],[T]]],[11,R[56],E,E,9,[[["self"]],[R[60]]]],[11,"from",E,E,45,[[[T]],[T]]],[11,R[5],E,E,45,[[],["i"]]],[11,R[57],E,E,45,[[["self"]],[T]]],[11,R[58],E,E,45,[[["self"],[T]]]],[11,"into",E,E,45,[[],[U]]],[11,R[53],E,E,45,[[[U]],[R[6]]]],[11,R[54],E,E,45,[[],[R[6]]]],[11,R[59],E,E,45,[[["self"]],[T]]],[11,R[55],E,E,45,[[["self"]],[T]]],[11,R[56],E,E,45,[[["self"]],[R[60]]]],[11,"from",E,E,46,[[[T]],[T]]],[11,R[5],E,E,46,[[],["i"]]],[11,"into",E,E,46,[[],[U]]],[11,R[53],E,E,46,[[[U]],[R[6]]]],[11,R[54],E,E,46,[[],[R[6]]]],[11,R[59],E,E,46,[[["self"]],[T]]],[11,R[55],E,E,46,[[["self"]],[T]]],[11,R[56],E,E,46,[[["self"]],[R[60]]]],[11,"from",E,E,47,[[[T]],[T]]],[11,R[5],E,E,47,[[],["i"]]],[11,"into",E,E,47,[[],[U]]],[11,R[53],E,E,47,[[[U]],[R[6]]]],[11,R[54],E,E,47,[[],[R[6]]]],[11,R[59],E,E,47,[[["self"]],[T]]],[11,R[55],E,E,47,[[["self"]],[T]]],[11,R[56],E,E,47,[[["self"]],[R[60]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[5],E,E,10,[[],["i"]]],[11,R[57],E,E,10,[[["self"]],[T]]],[11,R[58],E,E,10,[[["self"],[T]]]],[11,"into",E,E,10,[[],[U]]],[11,R[53],E,E,10,[[[U]],[R[6]]]],[11,R[54],E,E,10,[[],[R[6]]]],[11,R[59],E,E,10,[[["self"]],[T]]],[11,R[55],E,E,10,[[["self"]],[T]]],[11,R[56],E,E,10,[[["self"]],[R[60]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[5],E,E,6,[[],["i"]]],[11,R[57],E,E,6,[[["self"]],[T]]],[11,R[58],E,E,6,[[["self"],[T]]]],[11,"into",E,E,6,[[],[U]]],[11,R[53],E,E,6,[[[U]],[R[6]]]],[11,R[54],E,E,6,[[],[R[6]]]],[11,R[59],E,E,6,[[["self"]],[T]]],[11,R[55],E,E,6,[[["self"]],[T]]],[11,R[56],E,E,6,[[["self"]],[R[60]]]],[11,"from",E,E,48,[[[T]],[T]]],[11,R[5],E,E,48,[[],["i"]]],[11,"into",E,E,48,[[],[U]]],[11,R[53],E,E,48,[[[U]],[R[6]]]],[11,R[54],E,E,48,[[],[R[6]]]],[11,R[59],E,E,48,[[["self"]],[T]]],[11,R[55],E,E,48,[[["self"]],[T]]],[11,R[56],E,E,48,[[["self"]],[R[60]]]],[11,"from",E,E,49,[[[T]],[T]]],[11,R[5],E,E,49,[[],["i"]]],[11,"into",E,E,49,[[],[U]]],[11,R[53],E,E,49,[[[U]],[R[6]]]],[11,R[54],E,E,49,[[],[R[6]]]],[11,R[59],E,E,49,[[["self"]],[T]]],[11,R[55],E,E,49,[[["self"]],[T]]],[11,R[56],E,E,49,[[["self"]],[R[60]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[5],E,E,7,[[],["i"]]],[11,R[57],E,E,7,[[["self"]],[T]]],[11,R[58],E,E,7,[[["self"],[T]]]],[11,"into",E,E,7,[[],[U]]],[11,R[53],E,E,7,[[[U]],[R[6]]]],[11,R[54],E,E,7,[[],[R[6]]]],[11,R[59],E,E,7,[[["self"]],[T]]],[11,R[55],E,E,7,[[["self"]],[T]]],[11,R[56],E,E,7,[[["self"]],[R[60]]]],[11,"from",E,E,50,[[[T]],[T]]],[11,R[5],E,E,50,[[],["i"]]],[11,R[57],E,E,50,[[["self"]],[T]]],[11,R[58],E,E,50,[[["self"],[T]]]],[11,"into",E,E,50,[[],[U]]],[11,R[53],E,E,50,[[[U]],[R[6]]]],[11,R[54],E,E,50,[[],[R[6]]]],[11,R[59],E,E,50,[[["self"]],[T]]],[11,R[55],E,E,50,[[["self"]],[T]]],[11,R[56],E,E,50,[[["self"]],[R[60]]]],[11,"from",E,E,51,[[[T]],[T]]],[11,R[5],E,E,51,[[],["i"]]],[11,"into",E,E,51,[[],[U]]],[11,R[53],E,E,51,[[[U]],[R[6]]]],[11,R[54],E,E,51,[[],[R[6]]]],[11,R[59],E,E,51,[[["self"]],[T]]],[11,R[55],E,E,51,[[["self"]],[T]]],[11,R[56],E,E,51,[[["self"]],[R[60]]]],[11,"from",E,E,52,[[[T]],[T]]],[11,R[5],E,E,52,[[],["i"]]],[11,"into",E,E,52,[[],[U]]],[11,R[53],E,E,52,[[[U]],[R[6]]]],[11,R[54],E,E,52,[[],[R[6]]]],[11,R[59],E,E,52,[[["self"]],[T]]],[11,R[55],E,E,52,[[["self"]],[T]]],[11,R[56],E,E,52,[[["self"]],[R[60]]]],[11,"from",E,E,53,[[[T]],[T]]],[11,R[5],E,E,53,[[],["i"]]],[11,"into",E,E,53,[[],[U]]],[11,R[53],E,E,53,[[[U]],[R[6]]]],[11,R[54],E,E,53,[[],[R[6]]]],[11,R[59],E,E,53,[[["self"]],[T]]],[11,R[55],E,E,53,[[["self"]],[T]]],[11,R[56],E,E,53,[[["self"]],[R[60]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[5],E,E,11,[[],["i"]]],[11,"into",E,E,11,[[],[U]]],[11,R[53],E,E,11,[[[U]],[R[6]]]],[11,R[54],E,E,11,[[],[R[6]]]],[11,R[59],E,E,11,[[["self"]],[T]]],[11,R[55],E,E,11,[[["self"]],[T]]],[11,R[56],E,E,11,[[["self"]],[R[60]]]],[11,"from",E,E,54,[[[T]],[T]]],[11,R[5],E,E,54,[[],["i"]]],[11,R[57],E,E,54,[[["self"]],[T]]],[11,R[58],E,E,54,[[["self"],[T]]]],[11,"into",E,E,54,[[],[U]]],[11,R[53],E,E,54,[[[U]],[R[6]]]],[11,R[54],E,E,54,[[],[R[6]]]],[11,R[59],E,E,54,[[["self"]],[T]]],[11,R[55],E,E,54,[[["self"]],[T]]],[11,R[56],E,E,54,[[["self"]],[R[60]]]],[11,"from",E,E,55,[[[T]],[T]]],[11,R[5],E,E,55,[[],["i"]]],[11,R[57],E,E,55,[[["self"]],[T]]],[11,R[58],E,E,55,[[["self"],[T]]]],[11,"into",E,E,55,[[],[U]]],[11,R[53],E,E,55,[[[U]],[R[6]]]],[11,R[54],E,E,55,[[],[R[6]]]],[11,R[59],E,E,55,[[["self"]],[T]]],[11,R[55],E,E,55,[[["self"]],[T]]],[11,R[56],E,E,55,[[["self"]],[R[60]]]],[11,"from",E,E,56,[[[T]],[T]]],[11,R[5],E,E,56,[[],["i"]]],[11,"into",E,E,56,[[],[U]]],[11,R[53],E,E,56,[[[U]],[R[6]]]],[11,R[54],E,E,56,[[],[R[6]]]],[11,R[59],E,E,56,[[["self"]],[T]]],[11,R[55],E,E,56,[[["self"]],[T]]],[11,R[56],E,E,56,[[["self"]],[R[60]]]],[11,"from",E,E,57,[[[T]],[T]]],[11,R[5],E,E,57,[[],["i"]]],[11,R[57],E,E,57,[[["self"]],[T]]],[11,R[58],E,E,57,[[["self"],[T]]]],[11,"into",E,E,57,[[],[U]]],[11,R[53],E,E,57,[[[U]],[R[6]]]],[11,R[54],E,E,57,[[],[R[6]]]],[11,R[59],E,E,57,[[["self"]],[T]]],[11,R[55],E,E,57,[[["self"]],[T]]],[11,R[56],E,E,57,[[["self"]],[R[60]]]],[11,"from",E,E,58,[[[T]],[T]]],[11,R[5],E,E,58,[[],["i"]]],[11,R[57],E,E,58,[[["self"]],[T]]],[11,R[58],E,E,58,[[["self"],[T]]]],[11,"into",E,E,58,[[],[U]]],[11,R[53],E,E,58,[[[U]],[R[6]]]],[11,R[54],E,E,58,[[],[R[6]]]],[11,R[59],E,E,58,[[["self"]],[T]]],[11,R[55],E,E,58,[[["self"]],[T]]],[11,R[56],E,E,58,[[["self"]],[R[60]]]],[11,"from",E,E,59,[[[T]],[T]]],[11,R[5],E,E,59,[[],["i"]]],[11,R[57],E,E,59,[[["self"]],[T]]],[11,R[58],E,E,59,[[["self"],[T]]]],[11,"into",E,E,59,[[],[U]]],[11,R[53],E,E,59,[[[U]],[R[6]]]],[11,R[54],E,E,59,[[],[R[6]]]],[11,R[59],E,E,59,[[["self"]],[T]]],[11,R[55],E,E,59,[[["self"]],[T]]],[11,R[56],E,E,59,[[["self"]],[R[60]]]],[11,R[63],R[25],E,0,[[["self"]],[R[0]]]],[11,"from",E,E,0,[[[R[6]]],[R[1]]]],[11,R[64],E,E,0,[[["self"],[R[1]]],[[R[8]],[R[0],[R[8]]]]]],[11,"lt",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"into",E,E,0,[[],[R[6]]]],[11,"next",E,E,0,[[["self"]],[R[0]]]],[11,R[65],E,E,0,[[["self"]]]],[11,"fold",E,E,0,[[["acc"],["g"]],["acc"]]],[11,"count",E,E,0,[[],["usize"]]],[11,"last",E,E,0,[[],[R[0]]]],[11,"nth",E,E,0,[[["self"],["usize"]],[R[0]]]],[11,R[68],E,E,0,[[],["b"]]],[11,"all",E,E,0,[[["self"],["f"]],["bool"]]],[11,R[9],E,E,0,[[["self"]]]],[11,R[9],E,E,0,[[["self"]],["str"]]],[11,R[9],E,E,0,[[["self"]],["target"]]],[11,"fmt",E,E,0,[[["self"],[R[7]]],[["error"],[R[6],["error"]]]]],[11,"deref",E,E,0,[[["self"]]]],[11,R[66],E,E,0,[[["self"]]]],[11,"extend",E,E,0,[[["self"],[T]]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]],[11,"fmt",E,E,0,[[["self"],[R[7]]],[["error"],[R[6],["error"]]]]],[11,"cmp",E,E,0,[[["self"],[R[1]]],[R[8]]]],[11,"hash",E,E,0,[[["self"],["__hlr"]]]],[11,"eq",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,R[26],E,E,0,[[["self"]],["str"]]],[11,R[26],E,E,0,[[["self"]]]],[11,R[26],E,E,0,[[["self"]],["target"]]],[11,R[67],R[28],E,9,[[["self"],["f"]],[R[0]]]],[11,R[67],E,E,8,[[["self"],["f"]],[R[0]]]],[11,R[67],E,E,10,[[["self"],["f"]],[R[0]]]],[11,"from",E,E,59,[[],["self"]]],[11,"from",E,E,59,[[],["self"]]],[11,"from",E,E,59,[[],["self"]]],[11,"from",E,E,59,[[],["self"]]],[11,"from",E,E,59,[[],["self"]]],[11,"from",E,E,59,[[],["self"]]],[11,"from",E,E,59,[[],["self"]]],[11,"from",E,E,59,[[],["self"]]],[11,"next",E,E,30,[[["self"]],[R[0]]]],[11,"count",E,E,30,[[],["usize"]]],[11,R[65],E,E,30,[[["self"]]]],[11,"last",E,E,30,[[],[R[0]]]],[11,"next",E,E,15,[[["self"]],[R[0]]]],[11,R[65],E,E,15,[[["self"]]]],[11,"next",E,E,16,[[["self"]],[R[0]]]],[11,R[65],E,E,16,[[["self"]]]],[11,"next",E,E,8,[[["self"]],[R[0]]]],[11,R[65],E,E,8,[[["self"]]]],[11,"all",E,E,8,[[["self"],["g"]],["bool"]]],[11,"fold",E,E,8,[[["acc"],["g"]],["acc"]]],[11,"next",E,E,17,[[["self"]],[R[0]]]],[11,R[65],E,E,17,[[["self"]]]],[11,"fold",E,E,17,[[["acc"],["g"]],["acc"]]],[11,"next",E,E,18,[[["self"]],[R[0]]]],[11,R[65],E,E,18,[[["self"]]]],[11,"next",E,E,29,[[["self"]],[R[0]]]],[11,R[65],E,E,29,[[["self"]]]],[11,"next",E,E,21,[[["self"]],[R[0]]]],[11,R[65],E,E,21,[[["self"]]]],[11,"next",E,E,22,[[["self"]],[R[0]]]],[11,R[65],E,E,22,[[["self"]]]],[11,"next",E,E,25,[[["self"]],[R[0]]]],[11,R[65],E,E,25,[[["self"]]]],[11,"next",E,E,14,[[["self"]],[R[0]]]],[11,R[65],E,E,14,[[["self"]]]],[11,"fold",E,E,14,[[["acc"],["g"]],["acc"]]],[11,"next",E,E,23,[[["self"]],[R[0]]]],[11,R[65],E,E,23,[[["self"]]]],[11,"next",E,E,24,[[["self"]],[R[0]]]],[11,R[65],E,E,24,[[["self"]]]],[11,"next",E,E,26,[[["self"]],[R[0]]]],[11,"next",E,E,19,[[["self"]],[R[0]]]],[11,R[65],E,E,19,[[["self"]]]],[11,"fold",E,E,19,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,20,[[["self"]],[R[0]]]],[11,R[65],E,E,20,[[["self"]]]],[11,"fold",E,E,20,[[["acc"],["fold"]],["acc"]]],[11,R[68],E,E,20,[[],["c"]]],[11,"next",E,E,27,[[["self"]],[R[0]]]],[11,R[65],E,E,27,[[["self"]]]],[11,"next",E,E,28,[[["self"]],[R[0]]]],[11,R[65],E,E,28,[[["self"]]]],[11,"fold",E,E,28,[[["acc"],["g"]],["acc"]]],[11,R[68],E,E,28,[[],["c"]]],[11,"next",E,E,32,[[["self"]],[R[0]]]],[11,R[65],E,E,32,[[["self"]]]],[11,"fold",E,E,32,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,32,[[["self"]],[R[0]]]],[11,R[65],E,E,32,[[["self"]]]],[11,"fold",E,E,32,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,32,[[["self"]],[R[0]]]],[11,R[65],E,E,32,[[["self"]]]],[11,"fold",E,E,32,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,32,[[["self"]],[R[0]]]],[11,R[65],E,E,32,[[["self"]]]],[11,"fold",E,E,32,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,32,[[["self"]],[R[0]]]],[11,R[65],E,E,32,[[["self"]]]],[11,"fold",E,E,32,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,32,[[["self"]],[R[0]]]],[11,R[65],E,E,32,[[["self"]]]],[11,"fold",E,E,32,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,31,[[["self"]],[R[0]]]],[11,"next",E,E,40,[[["self"]],[R[0]]]],[11,"next",E,E,39,[[["self"]],[R[0]]]],[11,"next",E,E,37,[[["self"]],[R[0]]]],[11,"next",E,E,36,[[["self"]],[R[0]]]],[11,"next",E,E,41,[[["self"]],[R[0]]]],[11,R[65],E,E,41,[[["self"]]]],[11,"next",E,E,42,[[["self"]],[R[0]]]],[11,R[65],E,E,42,[[["self"]]]],[11,"next",E,E,43,[[["self"]],[R[0]]]],[11,R[65],E,E,43,[[["self"]]]],[11,"next",E,E,44,[[["self"]],[R[0]]]],[11,R[65],E,E,44,[[["self"]]]],[11,"next",E,E,9,[[["self"]],[R[0]]]],[11,R[65],E,E,9,[[["self"]]]],[11,"next",E,E,45,[[["self"]],[R[0]]]],[11,R[65],E,E,45,[[["self"]]]],[11,"next",E,E,46,[[["self"]],[R[0]]]],[11,R[65],E,E,46,[[["self"]]]],[11,"next",E,E,47,[[["self"]],[R[0]]]],[11,R[65],E,E,47,[[["self"]]]],[11,"next",E,E,10,[[["self"]],[R[0]]]],[11,R[65],E,E,10,[[["self"]]]],[11,"next",E,E,6,[[["self"]],[R[0]]]],[11,R[65],E,E,6,[[["self"]]]],[11,"next",E,E,48,[[["self"]],[R[0]]]],[11,R[65],E,E,48,[[["self"]]]],[11,"next",E,E,49,[[["self"]],[R[0]]]],[11,R[65],E,E,49,[[["self"]]]],[11,"next",E,E,7,[[["self"]],[R[0]]]],[11,R[65],E,E,7,[[["self"]]]],[11,"next",E,E,50,[[["self"]],[R[0]]]],[11,R[65],E,E,50,[[["self"]]]],[11,"next",E,E,51,[[["self"]],[R[0]]]],[11,R[65],E,E,51,[[["self"]]]],[11,"next",E,E,52,[[["self"]],[R[0]]]],[11,R[65],E,E,52,[[["self"]]]],[11,"next",E,E,11,[[["self"]],[R[0]]]],[11,"next",E,E,53,[[["self"]],[R[0]]]],[11,"next",E,E,55,[[["self"]],[R[0]]]],[11,R[65],E,E,55,[[["self"]]]],[11,"count",E,E,55,[[],["usize"]]],[11,"next",E,E,54,[[["self"]],[R[0]]]],[11,R[65],E,E,54,[[["self"]]]],[11,"count",E,E,54,[[],["usize"]]],[11,"next",E,E,56,[[["self"]],[R[0]]]],[11,R[65],E,E,56,[[["self"]]]],[11,"next",E,E,57,[[["self"]],[R[0]]]],[11,R[65],E,E,57,[[["self"]]]],[11,"next",E,E,58,[[["self"]],[R[0]]]],[11,R[65],E,E,58,[[["self"]]]],[11,"next",E,E,59,[[["self"]],[R[0]]]],[11,R[65],E,E,59,[[["self"]]]],[11,"next",E,E,59,[[["self"]],[R[0]]]],[11,R[65],E,E,59,[[["self"]]]],[11,"next",E,E,59,[[["self"]],[R[0]]]],[11,R[65],E,E,59,[[["self"]]]],[11,"next",E,E,59,[[["self"]],[R[0]]]],[11,R[65],E,E,59,[[["self"]]]],[11,"next",E,E,59,[[["self"]],[R[0]]]],[11,R[65],E,E,59,[[["self"]]]],[11,"next",E,E,59,[[["self"]],[R[0]]]],[11,R[65],E,E,59,[[["self"]]]],[11,"next",E,E,59,[[["self"]],[R[0]]]],[11,R[65],E,E,59,[[["self"]]]],[11,"next",E,E,59,[[["self"]],[R[0]]]],[11,R[65],E,E,59,[[["self"]]]],[11,R[63],E,E,19,[[["self"]],[R[0]]]],[11,R[63],E,E,27,[[["self"]],[R[0]]]],[11,R[63],E,E,28,[[["self"]],[R[0]]]],[11,R[63],E,E,32,[[["self"]],[R[0]]]],[11,R[63],E,E,32,[[["self"]],[R[0]]]],[11,R[63],E,E,32,[[["self"]],[R[0]]]],[11,R[63],E,E,32,[[["self"]],[R[0]]]],[11,R[63],E,E,32,[[["self"]],[R[0]]]],[11,R[63],E,E,32,[[["self"]],[R[0]]]],[11,R[63],E,E,45,[[["self"]],[R[0]]]],[11,R[63],E,E,6,[[["self"]],[R[0]]]],[11,R[63],E,E,48,[[["self"]],[R[0]]]],[11,R[63],E,E,58,[[["self"]],[R[0]]]],[11,"clone",E,E,30,[[["self"]],[R[69]]]],[11,"clone",E,E,15,[[["self"]],[R[13]]]],[11,"clone",E,E,16,[[["self"]],[R[70]]]],[11,"clone",E,E,8,[[["self"]],["putback"]]],[11,"clone",E,E,17,[[["self"]],["product"]]],[11,"clone",E,E,18,[[["self"]],[R[34]]]],[11,"clone",E,E,29,[[["self"]],["step"]]],[11,"clone",E,E,21,[[["self"]],["self"]]],[11,"clone",E,E,22,[[["self"]],["self"]]],[11,"clone",E,E,25,[[["self"]],["self"]]],[11,"clone",E,E,14,[[["self"]],["self"]]],[11,"clone",E,E,24,[[["self"]],[R[71]]]],[11,"clone",R[25],E,4,[[["self"]],[R[27]]]],[11,"clone",R[28],E,32,[[["self"]],["self"]]],[11,"clone",E,E,33,[[["self"]],["format"]]],[11,"clone",E,E,41,[[["self"]],[R[31]]]],[11,"clone",E,E,42,[[["self"]],[R[72]]]],[11,"clone",R[25],E,2,[[["self"]],[R[51]]]],[11,"clone",R[28],E,9,[[["self"]],[R[14]]]],[11,"clone",E,E,45,[[["self"]],[R[73]]]],[11,"clone",E,E,10,[[["self"]],[R[74]]]],[11,"clone",E,E,6,[[["self"]],["rciter"]]],[11,"clone",E,E,7,[[["self"]],["unfold"]]],[11,"clone",E,E,50,[[["self"]],[R[75]]]],[11,"clone",E,E,55,[[["self"]],[R[76]]]],[11,"clone",E,E,54,[[["self"]],["unique"]]],[11,"clone",R[25],E,3,[[["self"]],[R[79]]]],[11,"clone",R[28],E,57,[[["self"]],["zipeq"]]],[11,"clone",E,E,58,[[["self"]],[R[77]]]],[11,"clone",E,E,59,[[["self"]],["zip"]]],[11,"clone",R[25],E,5,[[["self"]],[R[78]]]],[11,"eq",E,E,4,[[["self"],[R[27]]],["bool"]]],[11,"ne",E,E,4,[[["self"],[R[27]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[51]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[51]]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[79]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[79]]],["bool"]]],[11,"eq",E,E,5,[[["self"],[R[78]]],["bool"]]],[11,"ne",E,E,5,[[["self"],[R[78]]],["bool"]]],[11,"drop",R[28],E,39,[[["self"]]]],[11,"drop",E,E,36,[[["self"]]]],[11,"fmt",E,E,33,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,34,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,33,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,15,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,16,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,8,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,17,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,18,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,29,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,21,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,22,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,25,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,14,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,23,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,24,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,26,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[25],E,4,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[28],E,32,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,31,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,33,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,41,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,42,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,43,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,44,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[25],E,2,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[28],E,9,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,47,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,10,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,6,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,48,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,49,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,7,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,50,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,51,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,52,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,53,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,55,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,54,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[25],E,3,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[28],E,57,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,58,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,59,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[25],E,5,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",R[28],E,33,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,33,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,33,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,33,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,33,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,33,[[["self"],[R[7]]],[R[6]]]],[11,"is_left",R[25],R[80],0,[[["self"]],["bool"]]],[11,R[81],E,R[82],0,[[["self"]],["bool"]]],[11,"left",E,R[83],0,[[],[R[0]]]],[11,"right",E,R[84],0,[[],[R[0]]]],[11,R[9],E,R[85],0,[[["self"]],[["r"],[R[1]],["l"]]]],[11,R[26],E,R[86],0,[[["self"]],[["r"],["l"],[R[1]]]]],[11,"flip",E,R[87],0,[[],[R[1]]]],[11,R[88],E,R[2],0,[[["f"]],[R[1]]]],[11,R[89],E,R[3],0,[[["f"]],[R[1]]]],[11,R[1],E,R[90],0,[[["f"],["g"]],[T]]],[11,R[91],E,R[92],0,[[["ctx"],["f"],["g"]],[T]]],[11,R[93],E,R[2],0,[[["f"]],[R[1]]]],[11,R[94],E,R[3],0,[[["f"]],[R[1]]]],[11,R[5],E,R[95],0,[[],[R[1]]]],[11,"left_or",E,R[96],0,[[["l"]],["l"]]],[11,R[97],E,R[98],0,[[],["l"]]],[11,R[99],E,R[100],0,[[["f"]],["l"]]],[11,"right_or",E,R[101],0,[[["r"]],["r"]]],[11,R[102],E,R[103],0,[[],["r"]]],[11,R[104],E,R[105],0,[[["f"]],["r"]]],[11,R[106],E,R[4],0,[[]]],[11,R[107],E,R[4],0,[[]]],[11,R[29],E,R[108],0,[[],[T]]],[11,"map",E,R[109],0,[[["f"]],[R[1]]]]],"p":[[4,"Either"],[4,"Diff"],[4,R[110]],[4,"Position"],[4,R[111]],[4,R[112]],[3,"RcIter"],[3,"Unfold"],[3,"PutBack"],[3,R[113]],[3,"PutBackN"],[3,"Tuples"],[8,R[114]],[8,R[115]],[3,"Dedup"],[3,R[116]],[3,R[117]],[3,"Product"],[3,"Batching"],[3,"MapInto"],[3,R[118]],[3,"Merge"],[3,"MergeBy"],[3,R[119]],[3,R[120]],[3,"Coalesce"],[3,R[121]],[3,R[122]],[3,"Update"],[3,"Step"],[3,R[123]],[3,R[124]],[3,R[125]],[3,"Format"],[3,R[126]],[3,R[127]],[3,"Chunk"],[3,"Chunks"],[3,"GroupBy"],[3,"Group"],[3,"Groups"],[3,R[128]],[3,"KMerge"],[3,"KMergeBy"],[3,R[129]],[3,"PadUsing"],[3,R[130]],[3,R[131]],[3,"RepeatN"],[3,R[132]],[3,"Iterate"],[3,"Tee"],[3,R[133]],[3,R[134]],[3,"Unique"],[3,"UniqueBy"],[3,R[135]],[3,"ZipEq"],[3,R[136]],[3,"Zip"]]};
searchIndex["rotated_vec"]={"doc":E,"i":[[3,R[139],"rotated_vec","A dynamic array based on a 2-level rotated array.",N,N],[3,"Iter",E,R[137],N,N],[3,"IterMut",E,R[137],N,N],[3,"IntoIter",E,"An owning iterator over the items of a `RotatedVec`.",N,N],[11,"new",E,"Makes a new `RotatedVec` without any heap allocations.",0,[[],["self"]]],[11,"with_capacity",E,"Constructs a new, empty `RotatedVec<T>` with the specified…",0,[[["usize"]],[R[138]]]],[11,"get",E,"Returns a reference to the value in the array, if any, at…",0,[[["self"],["usize"]],[[R[0]],[T]]]],[11,"get_mut",E,"Returns a mutable reference to the value in the array, if…",0,[[["self"],["usize"]],[[R[0]],[T]]]],[11,"swap",E,"Swaps two elements in the vector.",0,[[["self"],["usize"]]]],[11,"capacity",E,"Returns the number of elements the vector can hold without…",0,[[["self"]],["usize"]]],[11,"reserve_exact",E,"Reserves the minimum capacity for exactly `additional`…",0,[[["self"],["usize"]]]],[11,"reserve",E,"Reserves capacity for at least `additional` more elements…",0,[[["self"],["usize"]]]],[11,"shrink_to_fit",E,"Shrinks the capacity of the vector as much as possible.",0,[[["self"]]]],[11,"truncate",E,"Shortens the vector, keeping the first `len` elements and…",0,[[["self"],["usize"]]]],[11,"iter",E,"Gets an iterator that visits the values in the…",0,[[["self"]],["iter"]]],[11,"iter_mut",E,"Gets a mutable iterator that visits the values in the…",0,[[["self"]],["itermut"]]],[11,"len",E,"Returns the number of elements in the set.",0,[[["self"]],["usize"]]],[11,"is_empty",E,"Returns `true` if the set contains no elements.",0,[[["self"]],["bool"]]],[11,"clear",E,"Clears the vector, removing all values.",0,[[["self"]]]],[11,"contains",E,"Returns `true` if the `RotatedVec` contains an element…",0,[[["self"],[T]],["bool"]]],[11,"push",E,"Appends an element to the back of a collection.",0,[[["self"],[T]]]],[11,"pop",E,"Removes the last element from a vector and returns it, or…",0,[[["self"]],[R[0]]]],[11,"insert",E,"Inserts an element at position `index` within the vector.",0,[[["self"],["usize"],[T]]]],[11,"remove",E,"Removes and returns the element at position `index` within…",0,[[["self"],["usize"]],[T]]],[11,"append",E,"Moves all the elements of `other` into `self`, leaving…",0,[[["self"]]]],[11,"sort",E,"Sorts the vector.",0,[[["self"]]]],[11,"sort_unstable",E,"Sorts the vector, but may not preserve the order of equal…",0,[[["self"]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[5],E,E,0,[[],["i"]]],[11,R[57],E,E,0,[[["self"]],[T]]],[11,R[58],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,R[53],E,E,0,[[[U]],[R[6]]]],[11,R[54],E,E,0,[[],[R[6]]]],[11,R[59],E,E,0,[[["self"]],[T]]],[11,R[55],E,E,0,[[["self"]],[T]]],[11,R[56],E,E,0,[[["self"]],[R[60]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[5],E,E,1,[[],["i"]]],[11,R[57],E,E,1,[[["self"]],[T]]],[11,R[58],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,R[53],E,E,1,[[[U]],[R[6]]]],[11,R[54],E,E,1,[[],[R[6]]]],[11,R[59],E,E,1,[[["self"]],[T]]],[11,R[55],E,E,1,[[["self"]],[T]]],[11,R[56],E,E,1,[[["self"]],[R[60]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[5],E,E,2,[[],["i"]]],[11,"into",E,E,2,[[],[U]]],[11,R[53],E,E,2,[[[U]],[R[6]]]],[11,R[54],E,E,2,[[],[R[6]]]],[11,R[59],E,E,2,[[["self"]],[T]]],[11,R[55],E,E,2,[[["self"]],[T]]],[11,R[56],E,E,2,[[["self"]],[R[60]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[5],E,E,3,[[],["i"]]],[11,R[57],E,E,3,[[["self"]],[T]]],[11,R[58],E,E,3,[[["self"],[T]]]],[11,"into",E,E,3,[[],[U]]],[11,R[53],E,E,3,[[[U]],[R[6]]]],[11,R[54],E,E,3,[[],[R[6]]]],[11,R[59],E,E,3,[[["self"]],[T]]],[11,R[55],E,E,3,[[["self"]],[T]]],[11,R[56],E,E,3,[[["self"]],[R[60]]]],[11,"from",E,E,0,[[],["self"]]],[11,"from",E,E,0,[[["vec"]],["self"]]],[11,"next",E,E,1,[[["self"]],[R[0]]]],[11,"nth",E,E,1,[[["self"],["usize"]],[R[0]]]],[11,"count",E,E,1,[[],["usize"]]],[11,"last",E,E,1,[[],[R[0]]]],[11,"max",E,E,1,[[],[R[0]]]],[11,"min",E,E,1,[[],[R[0]]]],[11,R[65],E,E,1,[[["self"]]]],[11,"next",E,E,2,[[["self"]],[R[0]]]],[11,"nth",E,E,2,[[["self"],["usize"]],[R[0]]]],[11,"count",E,E,2,[[],["usize"]]],[11,"last",E,E,2,[[],[R[0]]]],[11,R[65],E,E,2,[[["self"]]]],[11,"next",E,E,3,[[["self"]],[R[0]]]],[11,"cmp",E,E,0,[[["self"],[R[138]]],[R[8]]]],[11,R[63],E,E,1,[[["self"]],[R[0]]]],[11,"nth_back",E,E,1,[[["self"],["usize"]],[R[0]]]],[11,R[63],E,E,2,[[["self"]],[R[0]]]],[11,"nth_back",E,E,2,[[["self"],["usize"]],[R[0]]]],[11,R[64],E,E,0,[[["self"],[R[138]]],[[R[0],[R[8]]],[R[8]]]]],[11,"default",E,E,0,[[],[R[138]]]],[11,R[5],E,E,0,[[]]],[11,"extend",E,E,0,[[["self"],["i"]]]],[11,"clone",E,E,0,[[["self"]],[R[138]]]],[11,"clone",E,E,1,[[["self"]],["iter"]]],[11,"clone",E,E,3,[[["self"]],[R[50]]]],[11,"eq",E,E,0,[[["self"]],["bool"]]],[11,"into",E,E,0,[[],["vec"]]],[11,"len",E,E,1,[[["self"]],["usize"]]],[11,"len",E,E,2,[[["self"]],["usize"]]],[11,"fmt",E,E,0,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,1,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,2,[[["self"],[R[7]]],[R[6]]]],[11,"fmt",E,E,3,[[["self"],[R[7]]],[R[6]]]],[11,"index",E,E,0,[[["self"],["usize"]],[T]]],[11,"index_mut",E,E,0,[[["self"],["usize"]],[T]]],[11,"hash",E,E,0,[[["self"],["h"]]]],[11,"from_iter",E,E,0,[[["intoiterator"]],["self"]]]],"p":[[3,R[139]],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);